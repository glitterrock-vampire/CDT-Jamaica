// @ts-nocheck
import YouTubeDurationInput from '../components/YouTubeDurationInput.jsx';

// Function to fetch duration from YouTube API
async function fetchYoutubeDuration(youtubeId) {
  if (!youtubeId) return null;
  
  const YOUTUBE_API_KEY = process.env.SANITY_STUDIO_YOUTUBE_API_KEY;
  if (!YOUTUBE_API_KEY) {
    console.warn('YouTube API key is not set in environment variables');
    return null;
  }

  try {
    const response = await fetch(
      `https://www.googleapis.com/youtube/v3/videos?id=${youtubeId}&part=contentDetails&key=${YOUTUBE_API_KEY}`
    );
    const data = await response.json();
    
    if (data.items && data.items.length > 0) {
      const duration = data.items[0].contentDetails.duration;
      const match = duration.match(/PT(?:\d+H)?(\d+M)?(\d+S)?/);
      
      if (match) {
        const hours = (duration.match(/(\d+)H/) || [])[1] || 0;
        const minutes = (duration.match(/(\d+)M/) || [])[1] || 0;
        const seconds = (duration.match(/(\d+)S/) || [])[1] || 0;
        
        if (hours > 0) {
          return `${hours}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
        }
        return `${minutes}:${String(seconds).padStart(2, '0')}`;
      }
    }
    return null;
  } catch (error) {
    console.error('Error fetching YouTube duration:', error);
    return null;
  }
}

export default {
  name: 'repertoireItem',
  title: 'Repertoire Item',
  type: 'document',
  fields: [
    // Basic Information
    {
      name: 'title',
      title: 'Title',
      type: 'string',
      validation: Rule => Rule.required()
    },
    {
      name: 'slug',
      title: 'Slug',
      type: 'slug',
      options: {
        source: 'title',
        maxLength: 96,
      },
      validation: Rule => Rule.required()
    },
    {
      name: 'description',
      title: 'Description',
      type: 'text',
      rows: 4,
      description: 'A brief description of the repertoire item'
    },
    
    // Media
    {
      name: 'thumbnail',
      title: 'Thumbnail',
      type: 'image',
      options: { hotspot: true },
      fields: [
        {
          name: 'alt',
          type: 'string',
          title: 'Alternative text',
          description: 'Important for SEO and accessibility'
        }
      ]
    },
    {
      name: 'heroImage',
      title: 'Hero Image',
      type: 'image',
      description: 'Large hero image for the dance detail page',
      options: { hotspot: true },
      fields: [
        {
          name: 'alt',
          type: 'string',
          title: 'Alternative text',
          description: 'Important for SEO and accessibility'
        }
      ]
    },
    
    // Details
    {
      name: 'choreographer',
      title: 'Choreographer',
      type: 'string',
      validation: Rule => Rule.required()
    },
    {
      name: 'composer',
      title: 'Composer',
      type: 'string',
      validation: Rule => Rule.required()
    },
    
    // Performance Information
    {
      name: 'companyPremiere',
      title: 'Company Premiere',
      type: 'string',
      description: 'When and where the piece was first performed by the company'
    },
    {
      name: 'worldPremiere',
      title: 'World Premiere',
      type: 'string',
      description: 'When and where the piece was first performed anywhere'
    },
    {
      name: 'premieredBy',
      title: 'Premiered By',
      type: 'string',
      description: 'Who premiered this piece (if known)'
    },
    
    // Music and Design
    {
      name: 'music',
      title: 'Music',
      type: 'array',
      of: [{type: 'string'}],
      description: 'List of music/composers used in the piece',
      options: { layout: 'tags' }
    },
    {
      name: 'costumes',
      title: 'Costume Design',
      type: 'string',
      description: 'Costume designer(s) for the piece'
    },
    {
      name: 'lighting',
      title: 'Lighting Design',
      type: 'string',
      description: 'Lighting designer(s) for the piece'
    },
    
    // Classification
    {
      name: 'genre',
      title: 'Genre',
      type: 'array',
      of: [{type: 'string'}],
      options: {
        list: [
          {title: 'Modern', value: 'modern'},
          {title: 'Contemporary', value: 'contemporary'},
          {title: 'Folk', value: 'folk'},
          {title: 'Ballet', value: 'ballet'},
          {title: 'Jazz', value: 'jazz'},
          {title: 'Afro-Caribbean', value: 'afro-caribbean'},
          {title: 'Experimental', value: 'experimental'}
        ],
        layout: 'tags'
      }
    },
    {
      name: 'stylePeriod',
      title: 'Style/Period',
      type: 'array',
      of: [{type: 'string'}],
      options: {
        list: [
          {title: 'Baroque', value: 'baroque'},
          {title: 'Classical', value: 'classical'},
          {title: 'Romantic', value: 'romantic'},
          {title: '20th Century', value: '20th-century'},
          {title: 'Contemporary', value: 'contemporary'},
          {title: 'Jamaican', value: 'jamaican'}
        ],
        layout: 'tags'
      }
    },
    {
      name: 'category',
      title: 'Category',
      type: 'string',
      options: {
        list: [
          {title: 'Classical Masterpieces', value: 'classical'},
          {title: 'Contemporary Works', value: 'contemporary'},
          {title: 'Jamaican Compositions', value: 'jamaican'}
        ],
        layout: 'dropdown'
      }
    },
    
    // Additional Information
    {
      name: 'dedicatedTo',
      title: 'Dedicated To',
      type: 'string',
      description: 'If the piece was dedicated to someone'
    },
    {
      name: 'movements',
      title: 'Movements',
      type: 'array',
      of: [{type: 'string'}],
      description: 'List of movements (if applicable)',
      options: { layout: 'tags' }
    },
    {
      name: 'notableRecordings',
      title: 'Notable Recordings',
      type: 'array',
      of: [{type: 'string'}],
      description: 'List of notable recordings or performances',
      options: { layout: 'tags' }
    },
    
    // Media Reviews
    {
      name: 'mediaReviews',
      title: 'Media Reviews',
      type: 'array',
      of: [{
        type: 'object',
        fields: [
          {
            name: 'quote',
            title: 'Quote',
            type: 'text',
            rows: 3
          },
          {
            name: 'source',
            title: 'Source',
            type: 'string',
            description: 'E.g., Jamaica Gleaner, 2023'
          },
          {
            name: 'year',
            title: 'Year',
            type: 'number'
          }
        ]
      }],
      description: 'Notable reviews or quotes about the piece'
    },
    
    // Video and Duration
    {
      name: 'youtubeUrl',
      title: 'YouTube URL',
      type: 'url',
      description: 'Link to YouTube video if available',
      validation: Rule => Rule.uri({
        scheme: ['http', 'https', 'mailto', 'tel']
      })
    },
    {
      name: 'youtubeId',
      title: 'YouTube Video ID',
      type: 'string',
      description: 'The ID of the YouTube video (the part after v= in the URL)',
      options: {
        isHighlighted: true
      },
      validation: Rule => Rule.custom(async (youtubeId, context) => {
        if (context.document?.youtubeId === youtubeId) return true;
        if (!youtubeId) return true;
        
        const { getClient } = context;
        const client = getClient({ apiVersion: '2023-05-03' });
        
        try {
          const duration = await fetchYoutubeDuration(youtubeId);
          if (duration) {
            await client
              .patch(context.document?._id || '')
              .set({ duration })
              .commit();
          }
        } catch (error) {
          console.error('Error updating YouTube duration:', error);
        }
        
        return true;
      })
    },
    {
      name: 'duration',
      title: 'Duration',
      type: 'string',
      description: 'Video duration (auto-filled from YouTube when YouTube ID is provided)',
      components: {
        input: (props) => (
          <YouTubeDurationInput
            value={props.value}
            onChange={props.onChange}
            youtubeId={props.document?.youtubeId}
          />
        )
      },
      validation: Rule => Rule.custom(field => {
        if (!field) return true;
        if (typeof field === 'object') return 'Invalid duration format. Please enter as MM:SS (e.g., 3:45)';
        const durationStr = String(field).trim();
        const timeFormat = /^([0-9]+:)?[0-5]?[0-9]:[0-5][0-9]$/;
        return timeFormat.test(durationStr) || 'Please enter duration as MM:SS (e.g., 3:45) or H:MM:SS (e.g., 1:23:45)';
      })
    },
    {
      name: 'year',
      title: 'Year',
      type: 'string',
      description: 'Year of composition or premiere'
    },
    
    // Quote
    {
      name: 'quote',
      title: 'Quote',
      type: 'text',
      description: 'An inspirational or descriptive quote related to the piece'
    }
  ],
  
  preview: {
    select: {
      title: 'title',
      composer: 'composer',
      media: 'thumbnail'
    }
  }
};
